#!<%= scope['::nagios::params::python_2_vs_3_interpreter'] %>
# check_nginx is a Nagios to monitor nginx status
# The version is 1.0.0 + major fixes

import string
import getopt
import sys

try:
    # Python 3
    from urllib.request import urlopen, Request as http_request, HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, build_opener, install_opener
    from urllib.error import HTTPError
except ImportError:
    # Python 2
    from urllib2 import urlopen, HTTPError, Request as http_request, HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, build_opener, install_opener

def usage():
    print("""Usage: check_nginx [OPTION]...
Checks nginx status for nagios integration.

Mandatory arguments to long options are mandatory for short options too.
  -h, --help
  -H, --host=HOST       Connection hostname or IP address. Default: 127.0.0.1
  -P, --path=PATH       Path to the nginx stub status. Default: /status
  -u, --user=USER       Basic auth username. Default: off
  -p, --pass=PASS       Basic auth password. Default: off
  -w, --warning=CONNS   Warning threshold for Active connections. Default: off
  -c, --critical=CONNS  Critical threshold for Active connections. Default: off

Examples:
  check_nginx -H www.nginx.com -P /nginx-status -u igor -p nginx -w 500 -c 800
  check_nginx -H www.nginx.com -P /nginx-status -w 1000 -c 2000
  check_nginx -H 192.168.0.1""")
    sys.exit(3)

try:
    options,args = getopt.getopt(sys.argv[1:],"hH:P:u:p:w:c:",["help","host=","path=","user=","pass=","warning=","critical="])
except getopt.GetoptError:
    usage()
    sys.exit(3)

# Defaults
url  = "http://127.0.0.1"
path = "/status"

# Overrides and options
for name,value in options:
    if name in ("-h","--help"):
       usage()
    if name in ("-H","--host"):
       url = "http://"+value
    if name in ("-P","--path"):
       path = value
    if name in ("-u","--user"):
       user = value
    if name in ("-p","--pass"):
       passwd = value
    if name in ("-w","--warning"):
       warning = int(value)
    if name in ("-c","--critical"):
       critical = int(value)
try:
    req = http_request(url+path)
    if 'user' in dir() and 'passwd' in dir():
        passman = HTTPPasswordMgrWithDefaultRealm()
        passman.add_password(None, url+path, user, passwd)
        authhandler = HTTPBasicAuthHandler(passman)
        opener = build_opener(authhandler)
        install_opener(opener)
    response = urlopen(req)
    # Poor man's page parsing
    the_page = response.readline()
    conn = the_page.split()
    ActiveConn = int(conn[2])
    the_page1 = response.readline()
    the_page2 = response.readline()
    the_page3 = response.readline()
    response.close()
    b = the_page3.split()
    reading = int(b[1])
    writing = int(b[3])
    waiting = int(b[5])
    output = 'ActiveConn:%s Reading:%s Writing:%s Waiting:%s' % (ActiveConn,reading,writing,waiting)
except Exception as e:
    print("CRITICAL: Error while getting Connection - " + str(e))
    sys.exit(2)

if 'warning' in dir() and 'critical' in dir():
    perfdata = 'activeconn=%s;%s;%s;0; reading=%s writing=%s waiting=%s' % (ActiveConn,warning,critical,reading,writing,waiting)
    if ActiveConn >= critical:
        print('CRITICAL - %s|%s' % (output,perfdata))
        sys.exit(2)
    elif ActiveConn >= warning:
        print('WARNING - %s|%s' % (output,perfdata))
        sys.exit(1)
    else:
        print('OK - %s|%s' % (output,perfdata))
        sys.exit(0)
else:
    perfdata = 'activeconn=%s reading=%s writing=%s waiting=%s' % (ActiveConn,reading,writing,waiting)
    print('OK - %s|%s' % (output,perfdata))
    sys.exit(0)

