#!/bin/bash

#
# The script connects to given bootstrap Kafka server (Kafka broker) and gets
# lag information from given consumer group. If the lag is not within given
# thresholds, WARNING or CRITICAL is triggered. If consumer group consumes from
# multiple topics, the script will check lag for each topic separately and
# triggers alarm if lag was detected on any of the topics.
#

set -eo pipefail

PROGNAME=$(basename $0)
PROGPATH=$(echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,')

. $PROGPATH/utils.sh

fail() {
  local msg="$1"
  local state=$2
  echo $msg
  exit $state
}

# Default variables
KAFKACMD=$(which kafka-consumer-groups 2>/dev/null || \
  fail "Required kafka-consumer-groups command not found." $STATE_UNKNOWN)
WARN=10000
CRIT=30000

TEMPFILE="$(mktemp)"

# Trap to clean up on exit
trap "rm -rf ${TEMPFILE}" EXIT

# Functions
# Prints usage
usage() {
  echo "Usage: $(basename $0) -g <group> -b <address> [-k <path>] [-n <node>] [-w <warning>] [-c <critical>] [-h]"
  echo
  echo -e "\t-g <group>\tConsumer group to check (mandatory)"
  echo -e "\t-b <address>\tBootstrap server address to use, must be in host:port format, may be specified multiple times (mandatory)"
  echo -e "\t-k <path>\tPath to kafka-consumer-groups binary (default: /bin/kafka-consumer-groups)"
  echo -e "\t-n <node>\tConsumer node to check the lag for (default: check will be performed for all nodes)"
  echo -e "\t-w <warning>\twarning threshold (offset lag, default: 10000)"
  echo -e "\t-c <critical>\tcritical threshold (offset lag, default: 30000)"
  echo -e "\t-h\t\tDisplay this help message"
  exit ${STATE_UNKNOWN}
}

# Parses and validates passed arguemnts
check_arguments() {
  kafkacmd=${KAFKACMD}
  warn=${WARN}
  crit=${CRIT}
  node=''
  while getopts ":hg:b:k:n:w:c:" opt; do
      case $opt in
          h )
             usage
             ;;
          g )
             group=${OPTARG}
             ;;
          b )
             bootstraps="${bootstraps} ${OPTARG}"
             ;;
          k )
             kafkacmd=${OPTARG}
             ;;
          n )
             node=${OPTARG}
             ;;
          w )
             warn=${OPTARG}
             ;;
          c )
             crit=${OPTARG}
             ;;
          \?)
             fail "Invalid option: -${OPTARG}." $STATE_UNKNOWN
             ;;
          : )
             fail "Option -"${OPTARG}" requires an argument." $STATE_UNKNOWN
             ;;
          * )
             usage
             ;;
      esac
  done
  if [ -z ${group} ] || [ -z "${bootstraps}" ]
  then
    usage
  fi
}

# Joins arrays by given delimiter
join_by() {
  local IFS="${1}"
  shift
  echo "${*}"
}

# Get position for the given field
get_index() {
  local value="${1}"
  local array=("$@")

  for i in "${!array[@]}"
  do
    if [[ "${headers[$i]}" == "${value}" ]]
    then
      echo $((i+1))
      break
    fi
  done
}

# Main function
main() {
  # Dump data of consumer group to a file
  for bootstrap in $bootstraps
  do
    ${kafkacmd} \
      --bootstrap-server "${bootstrap}" \
      --describe \
      --group "${group}" 2> /dev/null \
      | grep -w "${node}\|TOPIC" > ${TEMPFILE} \
      && break
  done

  # If all brokers are unavailable, exit with unknown
  if [ -z "$(tail -n +2 ${TEMPFILE})" ]
  then
    fail "Unable to get info from Kafka." $STATE_CRITICAL
  fi

  # kafka-conusmer-groups doesn't return proper exit code on failure, check
  # file's content instead
  grep -Eq '^Error: ' ${TEMPFILE} && fail $(cat $TEMPFILE) $STATE_CRITICAL

  # Map headers to indexes
  mapfile -t headers < <( head -1 $TEMPFILE | tr -s ' '  '\n' )
  idx_topic=$(get_index 'TOPIC' "${headers[@]}")
  idx_partition=$(get_index 'PARTITION' "${headers[@]}")
  idx_lag=$(get_index 'LAG' "${headers[@]}")

  # Iterate over topics and find partition with largest lag per topic
  lags=()
  for topic in $(tail -n +2 ${TEMPFILE} | awk "{print \$${idx_topic}}" | sort | uniq)
  do
    OIFS=$IFS
    IFS=$'\n'
    for line in $(awk "{ if (\$${idx_topic} == \"${topic}\") print \$0 }" ${TEMPFILE})
    do
      partition=$(echo ${line} | awk "{print \$${idx_partition}}")
      lag=$(echo ${line} | awk "{print \$${idx_lag}}")
      lags+=("${topic}#${partition}#${lag}")
    done
    IFS=$OIFS
  done

  # Check thresholds
  state=${STATE_OK}
  perfdata=()
  for item in ${lags[@]}
  do
    topic=$(echo ${item} | awk -F# '{print $1}')
    partition=$(echo ${item} | awk -F# '{print $2}')
    lag=$(echo ${item} | awk -F# '{print $3}')
    if [[ ! ${lag} =~ ^[0-9]+$ ]] || [ -z ${lag} ]
    then
      echo -n "${topic} topic's lag (${partition}): unknown "
      state=$STATE_CRITICAL
    elif [ ${lag} -le ${warn} ] && [ ${lag} -le ${crit} ]
    then
      state=${state}
    elif [ ${lag} -gt ${warn} ] && [ ${lag} -le ${crit} ]
    then
      echo -n "${topic} topic's lag (${partition}): ${lag} "
      state=${STATE_WARNING}
    else
      echo -n "${topic} topic's lag (${partition}): ${lag} "
      state=${STATE_CRITICAL}
    fi
    perfdata+=("part_${partition}=${lag};${warn};${crit}")
  done

  [ ${state} -eq ${STATE_OK} ] && echo -n 'Lag within normal limits '

  # Attach perfdata
  echo "| $(join_by ' ' ${perfdata[@]})"

  exit ${state}
}

# Main part starts here
check_arguments $@
main

