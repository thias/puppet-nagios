#!<%= scope['::nagios::params::python_2_vs_3_interpreter'] %>
"""Usage:
    check-consul-health.py node NODE DC
        [--token=TOKEN]
        [--CheckID=CheckID | --ServiceName=ServiceName]
        [--verbose]

Arguments:
    NODE  the consul node_name
    DC    the consul datacenter

Options:
    -h --help                  show this
    -v --verbose               verbose output
    --token=TOKEN              consul token [default: empty]
    --CheckID=CheckID          CheckID matcher
    --ServiceName=ServiceName  ServiceName matcher
"""

from docopt import docopt
import requests, json, traceback
try:
    import exceptions
except ImportError:
    import builtins as exceptions

def dump(it):
    if arguments['--verbose']: print(it)

def buildNodeUrl():
    url = "http://localhost:8500/v1/health/node/%(NODE)s?dc=%(DC)s" % arguments
    dump("Url: " + url)
    return url

def getJsonFromUrl(url):
    headers = {'X-Consul-Token': "%(--token)s" % arguments}
    r = requests.get(url, headers=headers)
    dump("Response: " + r.text)
    dump("Status code: " + str(r.status_code))
    try:
      r.raise_for_status()
    except requests.exceptions.HTTPError as e:
      print("CRITICAL - %s" % str(e.response.text))
      exit(2)
    return r.json()

def printCheck(check):
    print ("> %(Node)s:%(ServiceName)s:%(Name)s:%(CheckID)s:%(Status)s" % check)

def processFailing(checks):
    filters = map(lambda field: \
        lambda x: arguments['--' + field] is None or x[field] == arguments['--'+field],
        ['CheckID', 'ServiceName']
    )

    filtered = list(filter(lambda x: all(f(x) for f in filters), checks))
    passing  = list(filter(lambda x: x['Status'] == 'passing', filtered))
    warning  = list(filter(lambda x: x['Status'] == 'warning', filtered))
    critical = list(filter(lambda x: x['Status'] == 'critical', filtered))

    if len(checks) == 0:
        print("There is no matching node!")
        return 1

    if len(filtered) == 0:
        print("There is no matching check!")
        return 1

    checkOutput = lambda x: x["Name"] + ":" + x["Output"]

    if len(critical):
        print("|".join(map(checkOutput, critical)))
        for check in critical:
            printCheck(check)
    if len(warning):
        print("|".join(map(checkOutput, warning)))
        for check in warning:
            printCheck(check)
    if len(passing):
        print("Passing: %d" % (len(passing)))
        for check in passing:
            printCheck(check)

    return 2 if len(critical) else 1 if len(warning) else 0

if __name__ == '__main__':
    try:
        arguments = docopt(__doc__)
        dump("Arguments: " + str(arguments))
        if arguments['node']:
            url = buildNodeUrl()
            json = getJsonFromUrl(url)
            exit(processFailing(json))
    except exceptions.SystemExit: raise
    except Exception as e:
        print("CRITICAL - %s" % str(e.message))
        exit(2)
